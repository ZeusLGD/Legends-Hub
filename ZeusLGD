-- [LEGENDS HUB CORRIGIDO] - PARTE 1
local function safeLoad(url)
    local success, result = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    if not success then
        warn("Falha ao carregar: " .. url)
    end
    return result
end

-- Carregando Fluent Renewed com segurança
local Library = safeLoad("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau")
local SaveManager = safeLoad("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau")
local InterfaceManager = safeLoad("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau")

if not Library then return end

local Window = Library:CreateWindow{
    Title = "Legends Hub",
    SubTitle = "by ZeusLGD",
    TabWidth = 160,
    Size = UDim2.fromOffset(1087, 690.5),
    Resize = true,
    MinSize = Vector2.new(470, 380),
    Acrylic = true,
    Theme = "Amethyst Dark",
    MinimizeKey = Enum.KeyCode.RightControl
}

local Tabs = {
    Home = Window:CreateTab{ Title = "Home", Icon = "house" },
    Main = Window:CreateTab{ Title = "Main", Icon = "phosphor-users-bold" },
    Rocks = Window:CreateTab{ Title = "Rocks", Icon = "mountain" },
    Rebirth = Window:CreateTab{ Title = "Auto Rebirths", Icon = "biceps-flexed" },
    Killing = Window:CreateTab{ Title = "Auto Kill", Icon = "skull" },
    Teleport = Window:CreateTab{ Title = "Teleport", Icon = "tree-palm" },
    Status = Window:CreateTab{ Title = "Status", Icon = "circle-plus" },
    Crystal = Window:CreateTab{ Title = "Crystal", Icon = "gem" },
    Misc = Window:CreateTab{ Title = "Misc", Icon = "command" },
    Credits = Window:CreateTab{ Title = "Credits", Icon = "credit-card" },
    Settings = Window:CreateTab{ Title = "Settings", Icon = "settings" }
}
local Options = Library.Options

Library:Notify{
    Title = "Welcome to Legends Hub",
    Content = "Legends Hub supports 6 games!",
    SubContent = "This game is muscle legends and currently em beta!",
    Duration = 13
}
-- PARTE 2: Aba Home (Velocidade, No Clip, Jump, Discord)
local player = game.Players.LocalPlayer
local speed = 16

Tabs.Home:AddSection("Discord Server Link")
Tabs.Home:CreateButton({
    Title = "Click to Copy Link",
    Description = "Join our Discord server!",
    Callback = function()
        Window:Dialog({
            Title = "Join Our Discord",
            Content = "Would you like to copy the invite link to our Discord server?",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        setclipboard("https://discord.gg/xbRqESfpD8")
                        print("[Legends Hub] Discord link copied to clipboard.")
                    end
                }
            }
        })
    end
})

Tabs.Home:AddSection("Local Player Configurations")

-- Speed Input + Toggle
Tabs.Home:AddInput("SpeedInput", {
    Title = "WalkSpeed",
    Default = tostring(speed),
    Placeholder = "Enter Speed",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        local num = tonumber(Value)
        if num then
            speed = num
            print("[Legends Hub] Speed set to:", speed)
            if Options.SpeedToggle.Value then
                applySpeed()
            end
        end
    end
})

Tabs.Home:AddToggle("SpeedToggle", {Title = "Enable Speed", Default = false}):OnChanged(function()
    applySpeed()
end)

function applySpeed()
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if humanoid and Options.SpeedToggle.Value then
            humanoid.WalkSpeed = speed
        end
    end
end

player.CharacterAdded:Connect(function(char)
    char:WaitForChild("Humanoid")
    if Options.SpeedToggle.Value then
        task.wait(0.1)
        applySpeed()
    end
end)

-- Infinite Jump
Tabs.Home:AddToggle("InfiniteJumpToggle", {Title = "Infinite Jump", Default = false}):OnChanged(function(state)
    if state then
        local UIS = game:GetService("UserInputService")
        local hum = player.Character and player.Character:WaitForChild("Humanoid")
        _G.InfiniteJumpConn = UIS.JumpRequest:Connect(function()
            if Options.InfiniteJumpToggle.Value and hum then
                hum:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
        print("[Legends Hub] Infinite Jump enabled")
    else
        if _G.InfiniteJumpConn then
            _G.InfiniteJumpConn:Disconnect()
            _G.InfiniteJumpConn = nil
            print("[Legends Hub] Infinite Jump disabled")
        end
    end
end)

-- No Clip
Tabs.Home:AddToggle("NoClipToggle", {Title = "No Clip", Default = false}):OnChanged(function(state)
    local RunService = game:GetService("RunService")
    if state then
        _G.NoClipConn = RunService.Stepped:Connect(function()
            local char = player.Character
            if char then
                for _, part in pairs(char:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide then
                        part.CanCollide = false
                    end
                end
            end
        end)
        print("[Legends Hub] No Clip enabled")
    else
        if _G.NoClipConn then
            _G.NoClipConn:Disconnect()
            _G.NoClipConn = nil
            print("[Legends Hub] No Clip disabled")
        end
    end
end)

Tabs.Main:AddSection("Auto Farm")

-- Auto Lift
Tabs.Main:AddToggle("AutoLiftToggle", {Title = "Auto Lift", Default = false}):OnChanged(function(state)
    if state then
        task.spawn(function()
            while Options.AutoLiftToggle.Value do
                local success, err = pcall(function()
                    game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
                end)
                if not success then warn("[Auto Lift] Erro:", err) end
                task.wait(0.1)
            end
        end)
    end
end)

-- Auto Fast Punch
Tabs.Main:AddToggle("FastPunchToggle", {Title = "Auto Fast Punch", Default = false}):OnChanged(function(state)
    if state then
        task.spawn(function()
            local player = game.Players.LocalPlayer
            while Options.FastPunchToggle.Value do
                local char = workspace:FindFirstChild(player.Name)
                local punchTool = player.Backpack:FindFirstChild("Punch") or (char and char:FindFirstChild("Punch"))

                if punchTool then
                    punchTool.Parent = char
                    task.wait(0.1)
                    local attackTime = punchTool:FindFirstChild("attackTime")
                    if attackTime then attackTime.Value = 0 end
                    punchTool:Activate()
                else
                    warn("[Fast Punch] Punch tool not found")
                    break
                end
                task.wait()
            end
        end)
    end
end)

-- Auto Normal Punch
Tabs.Main:AddToggle("NormalPunchToggle", {Title = "Auto Normal Punch", Default = false}):OnChanged(function(state)
    if state then
        task.spawn(function()
            local player = game.Players.LocalPlayer
            while Options.NormalPunchToggle.Value do
                local char = workspace:FindFirstChild(player.Name)
                local punchTool = player.Backpack:FindFirstChild("Punch") or (char and char:FindFirstChild("Punch"))

                if punchTool then
                    punchTool.Parent = char
                    task.wait(0.1)
                    local attackTime = punchTool:FindFirstChild("attackTime")
                    if attackTime then attackTime.Value = 0.35 end
                    punchTool:Activate()
                else
                    warn("[Normal Punch] Punch tool not found")
                    break
                end
                task.wait()
            end
        end)
    end
end)

Tabs.Main:AddSection("Auto Equip")

-- Equip Weights
Tabs.Main:AddToggle("EquipWeightToggle", {Title = "Auto Equip Weight", Default = false}):OnChanged(function(state)
    if state then
        task.spawn(function()
            while Options.EquipWeightToggle.Value do
                local tool = player.Backpack:FindFirstChild("Weight")
                if tool then tool.Parent = player.Character end
                task.wait(0.1)
            end
        end)
    end
end)

-- Equip Pushups
Tabs.Main:AddToggle("EquipPushupToggle", {Title = "Auto Equip Pushups", Default = false}):OnChanged(function(state)
    if state then
        task.spawn(function()
            while Options.EquipPushupToggle.Value do
                local tool = player.Backpack:FindFirstChild("Pushups")
                if tool then tool.Parent = player.Character end
                task.wait(0.1)
            end
        end)
    end
end)

-- Equip Situps
Tabs.Main:AddToggle("EquipSitupToggle", {Title = "Auto Equip Situps", Default = false}):OnChanged(function(state)
    if state then
        task.spawn(function()
            while Options.EquipSitupToggle.Value do
                local tool = player.Backpack:FindFirstChild("Situps")
                if tool then tool.Parent = player.Character end
                task.wait(0.1)
            end
        end)
    end
end)

-- Equip Handstands
Tabs.Main:AddToggle("EquipHandstandToggle", {Title = "Auto Equip Handstands", Default = false}):OnChanged(function(state)
    if state then
        task.spawn(function()
            while Options.EquipHandstandToggle.Value do
                local tool = player.Backpack:FindFirstChild("Handstands")
                if tool then tool.Parent = player.Character end
                task.wait(0.1)
            end
        end)
    end
end)

Tabs.Main:AddSection("Auto Gym")

-- Lista de academias e equipamentos disponíveis
local gymToTools = {
    ["Jungle"] = {"Boulder", "Bench", "Squat", "Bar Lift"},
    ["Muscle King"] = {"Boulder", "Bench", "Squat", "Dead Lift"},
}

local machineData = {
    ["Jungle"] = {
        Boulder   = {cf = CFrame.new(-8617,  37, 2677), rName = "Jungle Boulder"},
        Bench     = {cf = CFrame.new(-8629.88, 64.88, 1855.03), rName = "Jungle Bench"},
        Squat     = {cf = CFrame.new(-8374.26, 34.59, 2932.45), rName = "Jungle Squat"},
        ["Bar Lift"] = {cf = CFrame.new(-8678.06, 14.50, 2089.26), rName = "Jungle Bar Lift"},
    },
    ["Muscle King"] = {
        Boulder    = {cf = CFrame.new(-8940.12, 13.16, -5699.13), rName = "King Boulder"},
        Bench      = {cf = CFrame.new(-8590.06, 46.02, -6043.35), rName = "Muscle King Bench"},
        Squat      = {cf = CFrame.new(-8759, 44, -6044), rName = "Muscle King Squat"},
        ["Dead Lift"] = {cf = CFrame.new(-8773, 50, -5664), rName = "Muscle King Lift"},
    }
}

-- Dropdown de academia
local SelectGymDropdown = Tabs.Main:CreateDropdown("GymDropdown", {
    Title = "Select Gym",
    Values = {"Jungle", "Muscle King"},
    Multi = false,
    Default = 1,
})

-- Dropdown de equipamento (atualiza automaticamente)
local SelectToolDropdown = Tabs.Main:CreateDropdown("GymToolDropdown", {
    Title = "Select Tool",
    Values = gymToTools["Jungle"],
    Multi = false,
    Default = 1,
})

-- Quando mudar de academia, atualiza os equipamentos
SelectGymDropdown:OnChanged(function(newGym)
    if SelectToolDropdown.SetValues then
        SelectToolDropdown:SetValues(gymToTools[newGym])
        SelectToolDropdown:SetValue(gymToTools[newGym][1])
    end
end)

-- Toggle de ativar Auto Gym
Tabs.Main:AddToggle("GymToggle", {
    Title = "Auto Gym (selecione ambos os menus)",
    Default = false
}):OnChanged(function(state)
    if _G.GymConn then
        _G.GymConn:Disconnect()
        _G.GymConn = nil
    end

    if state then
        local RunService = game:GetService("RunService")
        _G.GymConn = RunService.Heartbeat:Connect(function()
            local gym = SelectGymDropdown.Value
            local tool = SelectToolDropdown.Value
            local info = machineData[gym] and machineData[gym][tool]
            if not info then return end

            local char = game.Players.LocalPlayer.Character
            if not (char and char.PrimaryPart) then return end

            char:SetPrimaryPartCFrame(info.cf)

            local success, err = pcall(function()
                local remote = game:GetService("ReplicatedStorage").rEvents.machineInteractRemote
                local machine = workspace:FindFirstChild("machinesFolder") and workspace.machinesFolder:FindFirstChild(info.rName)
                if machine and machine:FindFirstChild("interactSeat") then
                    remote:InvokeServer("useMachine", machine.interactSeat)
                end
            end)
            if not success then warn("[Auto Gym] Erro:", err) end
        end)
    end
end)

-- Valores padrão no início
SelectGymDropdown:SetValue("Jungle")
SelectToolDropdown:SetValue("Boulder")

Tabs.Main:AddSection("Brawl")

-- God Mode em Brawl
Tabs.Main:AddToggle("GodModeBrawlToggle", {
    Title = "God Mode (Brawl)",
    Default = false
}):OnChanged(function(state)
    if state then
        task.spawn(function()
            local rep = game:GetService("ReplicatedStorage")
            local brawlRemote = rep:FindFirstChild("rEvents") and rep.rEvents:FindFirstChild("brawlEvent")
            if not brawlRemote then
                warn("[GodMode] brawlEvent não encontrado.")
                return
            end
            while Options.GodModeBrawlToggle.Value do
                brawlRemote:FireServer("joinBrawl")
                task.wait(0) -- entra no brawl o mais rápido possível
            end
        end)
    end
end)

-- Auto Join Brawl normal
Tabs.Main:AddToggle("AutoJoinBrawlToggle", {
    Title = "Auto Join Brawl",
    Default = false
}):OnChanged(function(state)
    if state then
        task.spawn(function()
            local rep = game:GetService("ReplicatedStorage")
            local brawlRemote = rep:FindFirstChild("rEvents") and rep.rEvents:FindFirstChild("brawlEvent")
            if not brawlRemote then
                warn("[AutoJoin] brawlEvent não encontrado.")
                return
            end
            while Options.AutoJoinBrawlToggle.Value do
                brawlRemote:FireServer("joinBrawl")
                task.wait(2) -- intervalo padrão
            end
        end)
    end
end)

Tabs.Rebirth:AddSection("Auto Rebirth")

-- Auto Rebirth Infinito
Tabs.Rebirth:AddToggle("AutoRebirthToggle", {
    Title = "Auto Rebirth Infinito",
    Default = false
}):OnChanged(function(state)
    if state then
        task.spawn(function()
            local remote = game:GetService("ReplicatedStorage"):FindFirstChild("rEvents") and game.ReplicatedStorage.rEvents:FindFirstChild("rebirthRemote")
            if not remote then
                warn("[AutoRebirth] rebirthRemote não encontrado.")
                return
            end
            while Options.AutoRebirthToggle.Value do
                remote:InvokeServer("rebirthRequest")
                task.wait(0.1)
            end
        end)
    end
end)

-- Auto Size 2
Tabs.Rebirth:AddToggle("AutoSizeToggle", {
    Title = "Auto Size 2",
    Default = false
}):OnChanged(function(state)
    if state then
        _G.AutoSizeLoop = task.spawn(function()
            while Options.AutoSizeToggle.Value do
                local remote = game:GetService("ReplicatedStorage").rEvents:FindFirstChild("changeSpeedSizeRemote")
                if remote then
                    remote:InvokeServer("changeSize", 2)
                end
                task.wait(1)
            end
        end)
    else
        if _G.AutoSizeLoop then
            task.cancel(_G.AutoSizeLoop)
            _G.AutoSizeLoop = nil
        end
    end
end)

-- Fast Rebirths (script externo)
Tabs.Rebirth:AddToggle("FastRebirthsToggle", {
    Title = "Fast Rebirths (externo)",
    Default = false
}):OnChanged(function(state)
    if state then
        local success, err = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/ttvkaiser/Nebula-Hub/refs/heads/main/Muscle-Legends/Ddd.txt"))()
        end)
        if not success then
            warn("[Fast Rebirths] Erro ao carregar script externo:", err)
        end
    end
end)

-- Hide All Frames
Tabs.Rebirth:AddToggle("HideFramesToggle", {
    Title = "Hide All Frames",
    Default = false
}):OnChanged(function(state)
    local rSto = game:GetService("ReplicatedStorage")
    for _, obj in pairs(rSto:GetChildren()) do
        if obj:IsA("Instance") and obj.Name:match("Frame$") then
            obj.Visible = not state
        end
    end
end)

